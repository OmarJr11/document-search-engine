algoritmo concurrente conjunto pila multiplicidad setstacklogic jo él damiar lopez universidad nacional autonomo mexico ciudad mexico 04510 mexico dated 27 julio 2023 presente artculo objetivo describir explicar fundamento teorico algo- ritmo concurrente concurrent conjunto considerar sistema memoria compartido asincronico numero proceso colapsar verificacion algoritmo concurrent describir condicion progreso garantizar even- tualmente sucedero llamado seguridad algoritmo correctitud garantizar malo sucedero llamado viveza algoritmo explicar detalle significado correccion algoritmo concurrente centrando yo linealizabilidad abordar generalizacion concurrencia conjunto reciente conocido mostrar algoritmo setstacklogic algoritmo concurrente conjunto implementacion pila multiplicidad demostrar formal detallado propiedad algoritmo setstacklogic presentar esquema riguroso formalizacion tipo algoritmo podra utilizar algoritmo explicar funcionamiento algoritmo ejemplo escenario ilustran dinamica posible ejecución i. introduccion a. contexto estudio teora computacion determín problema computable resolver algoritmo as eficiencia estudio algorit- mos comenzo turing cuyo resultado llevar formalizar concepto algoritmo maquina turing llevar tesis church-turing maquina turing descrita modelo multicinta equivalente computacional maquina secuencial palabra modelo equivalente problema resolver eventualmente necesario desarrollar concepto formal eficiencia algoritmo complejidad buscar desarrollar estudiar algoritmo poder resolver problema tiempo razonable modelo computo equivalente llegar poseer desempeno considerablemente solución disminuir complejidad algoritmo poder ejecutar proceso forma simultaneo arquitectura multinucleo experimentar auge diseno evitar sobrecalentamiento generado nucleo procesador trabajar alto velocidad arquitectura multinucleo descrito modelo computo concurrente 1 permitir aumentar eficiencia objetivo cambiar explotar paralelismo desafo destacado computo moderno damian13.03@ciencias.unam.mx arxiv:2307.13915v1   cs.dc   26 jul 2023   2 b. relajacion multiplicidad recientemente buscar mejorar rendimiento objeto concurrente relajar semantica particular estudio centrar relajacion cola pila lo- grar mejora significativo rendimiento 24 relajacion estructura multiplicidad 57 intuitivamente estructura multiplicidad conjunto operación simultanea actuan objeto cambiar operacion haber ejecutar multipl operación actuan 8 objeto concurrent contador cola pila conjunto obje-  to implementar sistema asincronico proceso simultaneo comunicar acceder memoria compartido propenso falla c. organizacion seccion ii fundamento teorico as modelo computacion con- currente describir noción formal operación concurrencia operación seccion iii explicar describir formalmente nocion correctitud algoritmo concurrente seccion iv mostrar algoritmo setstacklogic algoritmo concurrente conjunto implementacion pila multiplicidad literatura encontrar diverso objeto concurrent as tipo semantica relajado objeto concurrent intervalo seccion v demostracion formal rigu- rosa propiedad algoritmo setstacklogic proposito explicar enfoque formal claro preciso emplear objeto concurrent seccion vi explicar ejemplo funcionamiento algoritmo setstacklogic ii fundamento algoritmo concurrente hilo coordinar modificar simultaneo informacion encontrar almacenado memoria compartido reto difcil solucionar tipo algoritmo coordinar modificación concurren- tes forma dato memoria compartido estir consistente forma ocurrar falla inesperado llegar encontrar computo secuencial formalmente entender proceso transicion maquina transición denominir evento denotar transición q = p evento q proceso evento p proceso evento e. interpretacion claro proceso concurrente maqui- na evento transición ejecución instrucción podran dejar invariante maquina evento instantaneo ocurrir instante tiempo conveniente exigir evento simultaneo evento distinto ocurrir momento distin- to permitirar inducir orden conjunto evento ejecucion algoritmo concurrent   3 hilo producir secuencia evento a0 a1 an denotar jesma ocurren- cia evento ai aj i. evento preceder evento b ocurrir b denotar b. relacion precedencia orden evento nocion tiempo ocurrir evento a0 a1 evento a0 a1 definir intervalo i(a0 a1 duracion a0 a1 intervalo ia(a0 a1 preceder intervalo ib(b0 b1 a1 b0 denotir io ib relacion orden parcial intervalo definir intervalo concurrent relacionado ia ib ib ia definición permitir describir claro operación metodo cual- quier algoritmo describir concurrent esquema operacion intervalo invocacion llamado operacion evento posteriormente finalizacion dicho operacion retorno evento marcar operacion a. modelo computacion considerar modelo estandar sistema concurrent usar 6 7 n proceso asncrono p1 pn llegar fallar ejecu- cion formalmente proceso falla dejar paso ndice proceso pi i. proceso comunicar s invocar operación atomica objeto base compartido objeto base proporcionar operación atomica lectura escritura objeto denominar registro operación atomica potente lectura modificacion escritura objeto concurrente t definir maquina constar conjunto conjunto finito operación conjunto transición especificacion necesariamente secuencial operación pendiente transición involucrar invocación nocion objeto concurrente formalizar siguiente subsección implementacion objeto concurrente t algoritmo distribuido constar maquina local a1 an maquina local ai especificar operación objeto base pi ejecuta devolver respuesta invocar operacion alto nivel t. invocación operacion objeto base paso ejecucion secuencia posiblemente infinito paso ejecución operación objeto base invocación respuesta operación objeto concurrente t siguiente propiedad 1 proceso secuencial invocar operacion res- puesto correspondiente invocar operacion ejecución formado 2 invocacion operacion op denotado inv(op proceso pi paso pi invocacion respuesta correspondiente denotado res(op paso especificado pi invoca op   4 operacion op completo invocacion respuesta aparecer ejecu- cion operacion pendiente ejecucion aparecer invocacion proceso correcto ejecucion tomar infinito paso simplicidad perdida generalidad identificar invocacion operacion paso respuesta paso b. condición progreso comportamiento objeto concurrent describir propiedad seguridad viveza denominado condición progreso 1 verificacion algoritmo concurrent analizar aspecto fundamental condicion progreso garantizar eventualmente sucedero llamado seguridad algoritmo correctitud garantizar malo sucedero llamado viveza algoritmo correctitud detallarer seccion es- pecificación condición progreso bloqueant bloqueant condición progreso bloqueant llegar producir retraso inesperado proceso retrasar ejecucion instrucción completo impedi- mento demas proceso continuir c. condición progreso bloqueant metodo condicion progreso bloqueante soler basado canda- lenguaje java lock cuyo funcionamiento basar cumplir exclusion mutuo precisamente candado indicar hilo ejecutar seccion crtico bloquear entrada dema hilo satisfacer ex- clusion mutuo forma candado usar aislar seccion crtico hilo adquirir liberar seccion crtico hilo encontrar ejecucion lenguaje java hilo ejecutar seccion crtico adquiere bloquea hilo esperar respuesta solicitud adquirir acceso seccion crtico caber mencionar fallo suspension hilo producirar bloqueo hilo podra recibir respuesta candado java poseer infraestructura capturar excepción caber tener él formalicer exclusion mutuo algoritmo sca intervalo hilo ejecuta seccion crtico sc formalmente algoritmo satisfago exclusion mutuo cumplir sección crtica hilo superponer hilo b considerer intervalo sca scb  ejecutar sección crtica suceder sca scb scb sco mencionar condición progreso bloqueantes recurrir candado deadlock-freir algun hilo intentar adquirir candado algun hilo b hilo tendrar exito adquirir candado entrar seccion   5 crtico starvation-freir hilo intentar adquirir candado exito algun momen- to adquisicion candado eventualmente liberar notese condicion starvation-free implicar condicion deadlock-free con- dicion deadlock-free importante asegurar sistema bloquear hilo individual atascar él esperar adquisicion candado denominar inanicion starvation existir hilo seguir ejecutar seccion crtico d. condición progreso no-bloqueant ver condición progreso bloqueant recurrir candado satisfacer exclusion mutuo definir tipo condición progre- so necesidad recurrir candado conocer condición progreso no-bloqueant retraso inesperado proceso retrasar dema proceso condición no-bloqueant importante siguiente condicion wait-free metodo operacion termín ejecutar él numero finito paso al- goritmo wait-free metodo operación componer condicion non-blocking lock-free metodo operacion non-blocking garantizar ejecu- cion infinito infinito operación completar numero finito paso palabra condicion wait-free garantizar proceso fallar subitamente eventualmente progrés metodo wait-free non-blocking rev metodo wait-free llegar ineficiente propiedad restrictivo non-blocking util podrar condición progreso version condición deadlock-freir starvation-free recurrir definicion candado sumamente util modelo computacion concurrente presento considerar posible falla proceso algoritmo mostrar principal contribucion recurrir candado discutir iii correctitud diverso noción correccion objeto concurrent propuesta mayora basar nocion equivalencia comportamiento secuencial 1 presentar condición correccion consistencia inactivo quiescent consis- tency consistencia secuencial sequential consistency linealizabilidad propiedad importante linealizabilidad modular llamado local 9 propiedad linealizabilidad condicion correccion fuerte primero a. condicion correctitud linealizabilidad linealizabilidad nocion estandar utilizado definir implementacion concu- rrente correcto objeto definido especificacion secuencial intuitivamente ejecucion linealizable operación ordenar él secuencialmente reordenar operación superponer respuesta satisfagar especificacion   6 objeto implementado definir especificacion secuencial objeto concurrente t maquina esta- especificado trav funcion transicion q invocacion inv(op q inv(op devolver tupla q res(op conjunto tup él maquina determinista indicar maquina pasar q respuesta op res(op especificación res(op escribir salto tuplar op r r valor salida operacion secuencia tupla invocacion-respuesta inv(op res(op producido maquina denominar ejecución secuencial formalizar linealizabilidad deber definir orden parcial < operación completado ejecucion denotar op < op res(op inv(op decir operación concurrent incomparab él < op||op denotar operación concurrent definicion iii.1 linealizabilidad implementacion objeto concurrente t. ejecucion   linealizable ejecucion secuencial s t s contener operación completado   contener operación pendiente entrada salida invocación respuesta s concuerdar entrada salida cualesquiero operación completado op op suceder op < op op aparecer op s. decir linealizable ejecución linealizable objeto concurrente correcto tratar encontrar forma ex- tender orden parcial orden condicion correccion linealizabilidad buscar justamente mencionar anteriormente dar ejecucion relacion < orden parcial ejecucion linealizable relacion < convertir orden explicar concepto linealizabilidad ejemplo considerar hilo b ejecutar programa obtener secuencia llamada respuesta operación denoter simplicidad i-esma llamado hilo b ia i llamar anteriormente inv(op respuesta ra i res(op claramente superposición llamado metodo llamado hecho hilo b. evento invocación respuesta orden tiempo real invocación respuesta metodo llamado b asignar orden secuencial orden mostrar continuacion figurar 1 secuencia evento ejecucion hilo b   7 ordenacion tiempo real evento mostrar flecha punteado rojo orden evento mostrado ia 1 ib 1 ra 1 rb 1 ia 2 ib 2 ra 2 rb 2 secuencia evento representar ejecucion 1 definir forma distinto llamar historial equivalente punto definicion linealizabilidad informalmente significar reordenacion evento respetar orden operación cumplir op < op significar evento respuesta operacion ocurrio evento llamada operacion reordenacion preservar orden ejemplo reordenación valida ejecucion mostrado figura 1 1 ia 1 ra 1 ib 1 rb 1 ib 2 rb 2 ia 2 ra 2 2 ib 1 rb 1 ia 1 ra 1 ib 2 rb 2 ia 2 ra 2 3 ib 1 rb 1 ia 1 ra 1 ia 2 ra 2 ib 2 rb 2 4 ia 1 ra 1 ib 1 rb 1 ia 2 ra 2 ib 2 rb 2 formalmente reordenación ejecución secuencial observ permutar orden evento llamada respuesta metodo concurrent deber remarcar natural metodo concurrent metodo ejecutar duracion ejecucion paralelo figurar 2 ejecucion metodo lectura w escritura r ejecución secuencial confirmar ejecucion correcto aqu referir ejecucion   definicion iii.1 definicion formal ejecucion secuencial consistente ejecucion ejecucion linealizable ejemplo sencillo considerar ejemplo pensar operación referir invocación metodo escritura denotado evento writte w finalizar lectura evento read r mostrar figura 2 ejecucion bastar tomar ejecucion secuencial 2 secuencia writte(1 read(1 writte(2 read(2 writte(3 read(3 writte(4 read(4 secuencia valer especificacion secuencial registro read obtener valor write reciente b. condicion correctitud linealizabilidad conjunto linealizacion conjunto permitir linealizar operación punto operación ejecutar simultaneamente linealizacion   8 conjunto estrictamente expresividad linealizacion tipo denominado linealizacion intervalo estrictamente poderoso linealiza- cion conjunto 7 linealizabilidad linealizacion conjunto propiedad composicionales[10 especificacion conjunto-concurrente objeto concurrente diferir ejecucion secuencial   recibir entrada actual q maquina conjunto inv = inv(op1 inv(opt invocación operación q inv retornar q r q r = res(op1 res(opt respuesta invocación inv conjunto inv r llamar clase concurrencia deber mencionar especificacion conjunto-concurrente clase concurrencia unico elemento corresponder especificacion secuencial definicion iii.2 linealizabilidad conjunto implementacion objeto con- currente t. ejecucion   linealizable conjunto ejecucion conjunto-concurrente s t s contener operación completado   contener operación pendiente entrada salida invocación respuesta s concuerdar entrada salida cualesquiero operación completado op op suceder op < op op aparecer op s. decir linealizable conjunto ejecución linealizable conjunto deber resaltar conjunto clase equivalencia relacion || clase equivalencia operación concurrent interpretacion linealizabilidad caso considerar conjunto llamada conjunto respuesta iv pila concurrent conjunto multiplicidad termino general pila semantica relajado denominar multiplicidad per- mite operación simultanea pop quitar obtengar elemento elemento devolver orden lifo perder ningun elemento formalmente pila conjunto concurrent especificar definicion iv.1 conjunto elemento push n = 1 2 conjunto q conjunto infinito cadena n inicial cadena vaco indicado q elemento q representar superior pila podrar vaco q cadena vaco transición siguiente q q q p ush(a = q p ush(a t rue .1 q q n t proceso q p op1 p opt = q p op1 p opt .2   9 pila vaco   q p op = p op .3 lema 7 mostrar algoritmo implemente pila concurrente conjunto mantener comportamiento pila secuencial caso unico razon implementacion proporcionar capacidad linealizacion unicamente operación pop concurrent pila secuencial describir definicion iv.1 punto restringir t = 1 proceso a. algoritmo setstacklogic describir algoritmo linealizable conjunto implementacion pila multiplicidad describir estructura nodo formar pila usual estructura dato tipo cola pila estir formado lista nodo contener elemento tipo primitivo concurrencia multiplicidad necesario definir estructura complejo nodo definir tipo operación util recurrir objeto tipo atomicreference proveer java variable tipo atomicreference proporcionar referencia algun objeto leer escribir atomicamente multipl hilo intentar modificar referencia almacenado variable tipo atomicreference atomico referencia consistente modificación suponer momento referencia instancia dado atomicreference objeto nodoi definirar estructura nodo metodo principal instancia get metodo permitir referencia almacenado variable tipo atomicreference leer atomicamente compareandset(nodo1 nodo2 metodo comparar referencia almacenado instancia atomicreference llamemosle nodo0 refe- rencia esperado nodo1 referencia igual nodo0 = = nodo1 en- tonz metodo insertar referencia nodo2 instancia atomicreference metodo compareandset cambiar referencia instancia atomicreference retorna t rue regurlarmente referir caso decir metodo compareandset exitoso caso contrario referencia sufrir ningun cam- bio metodo retornar f alse referirer caso decir metodo fallir exitoso algorithm 1 nodo(x nodo 1 value entero valor x 2 next nodo 3 elim variable booleana nodo definido estructura mostrar algoritmo 1 nodo contener atributo llamado value valor tipo primitivo almacenado nodo supondrer entero simplicidad concordancia definicion iv.1 atributo next objeto tipo nodo cuyo funcion referencia   10 atributo elim variable booleán atributo next referencia nodo lista nodo nodo poseer atributo booleano elim cuyo funcion indicar nodo pila formalizar nocion denominar logico figurar 3 panel representacion estructura pila referencia atomico t op panel b representacion estructura pila elemento pila pila vaco estructura pila representar lista nodo vear figura 3 lista nodo poseer referencia next referencia nodo lista valor nodo value referencia nodo apuntar null tener problema ar compareanset caso evitar problema ar claridad suponer nodo referencia distinto nodo cuyo variable booleana elim t rue tomar pila variable indicar nodo formar pila algoritmo constar variable tipo atomicreference < nodo > t op contener referencia nodo lista t op.get referencia apuntar nodo regularmente llamar cabezal referencia atomico t op encapsular pila figura 3 panel representar pila algoritmo setstacklogic 2 refe- rencia atomico t op apuntar nodo lista lista nodo conformado par valor entero booleano a1 t1 a2 t2 an tn nodo pertenecer pila cuyo variable booleana = f alse panel b representar pila vaco ningun nodo t op apuntar referencia nulo notese representar perfectamente pila vaco lista nodo panel nodo posear = t rue memoria pila vaca unico algoritmo 2 setstacklogic presentar continuacion inspirado algoritmo lockfreestack 1 algoritmo linealizable pila lock freir   11 algorithm 2 setstacklogic shared v ariabl top 1 procedurar push(x 2 while true do 3 t = top.get 4 if t.elim = = false thir 5 x.next = t 6 if top.compareandset(t x thir 7 return true 8 end if 9 else 10 top.compareandset(t t.next 11 end if 12 end while 13 end procedure 14 procedure pop 15 while true do 16 t = top.get 17 if t =   thir 18 return   19 end if 20 if t.elim = = false thir 21 t.elim = true 22 top.compareandset(t t.next 23 return t.value 24 else 25 top.compareandset(t t.next 26 end if 27 end while 28 end procedure discutir estructura representacion pila pasar describir operación algoritmo setstacklogic operación usual cumpliran multiplicidad p ush p op p ush(x anadir nodo x orden lifo operacion iniciar ciclo w hile iteracion intento insertar nodo x pila iteracion extraer nodo t referencia cabezal t op nodo t logicamente eliminar lneo 4 t.elim = = t rue avanzar cabezal t op nodo compareandset caso nodo apuntar cabezal logicamente eliminar t.elim = = f alse conectar referencia nodo t nodo x. cambio cabezal t op compareandset(t x caso exitoso nodo x insertar correctamente retornar lneo 7 caso contrario volver iterar intento p op remover nodo orden lifo pila operacion iniciar ciclo w hile iteracion intento remover nodo pila iteracion extraer nodo t referencia cabezal t op nodo t   operacion retornar valor nulo lnear 17 18 indicar pila vaca caso contrario nodo nulo evaluar lneo 20 elim = f alse nodo logicamente eliminado pasar cabezal nodo lneo 25 notese pila constar nodo eliminado logicamente cabezal avanzar llegar referencia nulo nodo pila logicamente elim = = f alse lnea   12 21 23 eliminar logicamente nodo lneo 21 referencia t op avanzar nodo 22 finalmente retornar valor nodo eliminado t.value lneo 23 teorema enuncia propiedad algoritmo setstacklogic cumplir podrar apreciar mostrar formalmente nocion logico pila correctitud algoritmo teorema iv.1 algoritmo setstacklogic implementacion linealizable conjunto pila multiplicidad non-blocking seccion demostrar teorema iv.1 demostracion divida forma subseccion v demostrar algoritmo 2 satisfacer non-blocking sub- seccion v b describir forma construir linealizacion conjunto subseccion definir punto linealizacion subseccion v c mostrar usar punto linealizacion subseccion v b obtener efectivamente linealiza- cion conjunto subseccion v d demostrar linealizacion conjunto dado subseccion v c implementacion pila multiplicidad formalmente cumplir transición corresponder pila dado definicion iv.1 denotar operacion p op devolver valor x p op x operacion p ush insertar valor x denotar p ush(x true v. demostracion formal a. prueba non-blocking set-stack-logic ver algoritmo non-blocking suponer ejecucion infinito algoritmo set-stack-logic op operacion cualquiera suponer op operacion p ush veamos non-blocking operacion completado evaluación lnea 4 6 fallar cantidad infinito lneo 4 falla existir operacion p op altero valor variable elim nodo t ejecutar lneo 21 defecto nodo poseer t.elim = f alse not p op ejecutar lneo 21 retornar instrucción completo resumen lneo 4 falla existir operacion p op completado lneo 6 falla sgnico metodo compareandset lneo 6 falla iteracion operacion op p op p ush ejecutar exito operacion compareandset iteracion ver existir operacion completado op completar trivial suponer op completado iteracion compareandset debio ejecutar él lneo 10 caso p ush lneo 25 caso p op inicial pila   existir cantidad infinito nodo operacion p ush nodo implicar completo algun momento pila vacir operacion completado operación pop analogo operacion p op completo lneo 17 20 fallar infinito lneo 17 falla infinito argumento similar visto existir operacion push poner nodo lneo 20 argumento caso lneo 4 lneo 20 falla existir operacion p op completado   13 b. procedimiento linealizacion conjunto setstacklogic algoritmo non-blocking operacion pendiente bloquear algoritmo algoritmo mantener completar infinidad operación operacion completar suponer perdida generalidad ejecucion finito operación pendiente tener bloquear dema ejecucion finito operación pendiente algoritmo 2 setstacklogic linealizacion conjunto objeto codificado variable t op valor etiqueta booleán elim nodo pila elemento pila nodo cuyo valor booleano elim f alse llamar logico pila definir formalmente linealizar ejecucion procederer construir linealizacion s asignar punto linealizacion operacion op e. punto linealizacion op denotado linpt(op evento primitivo invocacion inv(op respuesta res(op ten- gamos operación punto linealizacion linealizacion s proporcionar explcitamente finalmente ver linealizacion s inducir relacion orden < s clase concurrencia s cumplir especificacion pila iv.1 op dar instrucción linealizacion definir punto li- nealizacion linpt(op op parecer efecto recorder linpt(op evento primitivo significar ejecucion lnea algoritmo 2 operacion 1 op operacion p ush considerer ultimo iteracion ciclo w hile llamemosle eca paso ejecutar instruccion compareandset lneo 6 unico compareandset exitoso linealizar conjunto operacion p ush punto eca clase concurrencia s 2 op operacion p op caso retornar cadena vaco p op op operacion p op retornar lneo 18 corresponder operación p op retornir cadena vaco considerer ultimo iteracion ciclo while llamemosle eget paso correspondiente lneo 16 iteracion paso extraer nodo t almacenado variable t op metodo get condicion lneo 17 ultimo iteracion operacion retorno lneo 18 nodo t valor   paso eget linealizar conjunto operación p op retornar punto eget clase concurrencia s b retornar elemento nulo p op x op operacion p op retornar lneo 23 corresponder operación p op retornir t.value valor cadena x considerer conjunto ux contener operación p op devolver elemento x. suposicion elemento colocar pila maximo operacion p op ux extrae nodo ultimo ejecucion lneo 16 denoter tx nodo cuyo valor   14 x. observ operación ux extraen nodo tx corresponder ejecucion lneo 16 considerer evento operación p op ux escribir variable booleana elim t correspondiente lneo 21 llam ex elim paso not ex elim unico paso ux realmente cambiar variable elim eliminar logicamente nodo tx paso ex elim linealizar operación ux paso ex elim operación ux formar clase concurrencia ubicado ex elim simplicidad llamemosle op clase concurrencia s. observ clasificar clase concurrencia 1 op clase concurrencia correspondiente operacion p ush(a e. 2 op clase concurrencia correspondiente conjunto operación p op subcaso clase concurrencia op corresponder operacion p op p op b clase concurrencia op corresponder conjunto operación ux = p op1 p opt operacion p opi devolver p opi x x elemento nulo clase concurrencia definir ejecucion conjunto secuencial s. observir clase concurrencia op s punto linealizacion construc- cion linpt(op punto linealizacion operación e. definar < s clase concurrencia dar clase concurrencia op op s definir op < s op linpt(op linpt(op relacion orden clase concurrencia s. c. linealizacion ejecucion clase concurrencia definir ejecucion secuencial conjunto s. mostrar él ver dar clase concurrencia op s punto linealizacion linpt(op evento invocacion respuesta conjunto operación ope cumplir inv(ope linpt(op res(ope c.1 op s linpt(op punto linealizacion instrucción subseccion 3.2.1 probemo cumplir c.1 1 op clase concurrencia correspondiente operacion p ush(a e. linpt(op = eca ecar ejecucion instruccion compareandset lneo 6 p ush(a ultimo iteracion ciclo w hile claramente   15 inv(p ush(a eca invocacion preceder evento itera- ción ciclo w hile eca res(p ush(a respuesta operacion p ush(a corresponder evento asociado ejecucion lneo 7 2 op clase concurrencia correspondiente conjunto operación p op subcaso clase concurrencia op corresponder operacion p op p op punto linealizacion linpt(op = eget inv(p op eget invocacion preceder evento iteración ciclo w hile eget res(p op respuesta operacion p op corresponder evento asociado ejecucion lneo 18 b clase concurrencia op corresponder conjunto operación ux = p op1 p opt operacion p opi devolver p opi x x elemento nulo caso linealizar conjunto operación deber probar operacion p opi ux inv(p opi linpt(op res(p opi ux conjunto operación p op devolver elemento x. recorder linpt(op = ex elim ex elim evento descrito instruccion 2.b procedimiento v b. ex elim evento cambiar es- tado t.elim f alse t rue pasar inv(p opi ex elim caso contrario ex elim inv(p opi ejecucion tx = = f alse resultar fallido har pasar lneo 25 alterar valor t op iteracion nodo t tendrar valor distinto = x elemento x insertar unico contradecir p opi retornar tx pasar inv(p opi ex elim p opi ux ex elim res(p opi facil ex elim evento cambiar t.elim p opi ux ex elim eelim eelim ejecucion lneo 21 p opi ultimo iteracion eelim res(p opi transitividad precedencia ex elim   res(p opi concluir operacion p opi ux inv(p opi linpt(op res(p opi ux conjunto operación p op devolver elemento x. concluir s linealizacion conjunto vear construc- cion s operación respuesta considerar operación op1 op2 op1 < op2 res(op1 inv(op2 s operacion linealizar paso invocacion respuesta operacion   16 clase concurrencia op1 aparecer clase concurrencia op2 s linpt(op1 res(op1 inv(op2 linpt(op2 transitividad linpt(op1 linpt(op2 definicion   op1 < s   op2   op1   op1 clase concurrencia op1 op2 respectivamente concluir s linealizacion conjunto e. faltar s cumplir especificacion pila d. especificacion pila multiplicidad algoritmo setstacklogic seccion demostrar algoritmo setstacklogic satisfacer especificacion pila multiplicidad demostracion definir logico pila formalmente facilitar demostracion definicion v.1 q n forma q = a1a2 ak ai n i 1 k decimos q logico representar pila t1 tm elemento ai nodo tj algoritmo 2 tj.elim = f alse valor ai t1.next =   t1 = t op.get observ memoria representado nodo t1 tm logico representado nodo logicamente pila cumplir ti.elim = f alse nodo cumplir condicion participar pila logico setstacklogic satisfacer especificacion pila multiplicidad demostracion ejecucion finito operación pendiente algoritmo 1 setstacklogic de- mostremo cumplir especificacion pila iv.1 pila logico v.1 s linealizacion conjunto obtenido procedimiento linealizacion v b. clase concurrencia ordenado op1 < s op2 < s < s opm opi clase concurrencia operacion m numero clase concurrencia definido < s. em prefijo operación op1 opm sm correspondiente linealizacion conjunto inducir orden op1 < s < s opm demostrar sm satisfacer especificacion pila iv.1 m m cuyo tm induccion m. caso base trivial = s = pila ejecutar s e. hipotesis induccion suponer ejecucion secuencial conjunto sm em cumplir especificacion pila cuyo logico tm   17 paso inductivo demoster cumplir em+1ir cuyo linealizacion conjunto sm+1 dado procedimiento v b. inducir orden clase equivalencia ordenarla op0  < s op1 < s < s opm+1 hipotesis induccion prefijo em cumplir requerido bastar mostrar ejecutar operacion opm+1 transicion corresponder especificacion pila iv.1 t op variable compartido ejecutar opm+1 observ hipotesis induccion t op obtener ejecutar sm ejecutar clase concurrencia orden op0 < s op1 < s < s opm q nel logico pila ejecutar clase concurrencia opm representar logico pila t1 tm 1 opm+1 clase concurrencia correspondiente operacion p ush(a em punto linealizacion op linpt(p ush(a = eca corresponder ejecucion lneo 6 compareandset exitoso ultimo iteracion punto unico evento p ush logico pila cambio q q a. bastar opm q q n ejecutar p ush(a q a. cumplirar formalmente transicion q p ush(a = q p ush(a t rue opm < s opm+1 asegurar pila evento eca cambiar q q pila q algun evento modifico opm opm+1 asegurar ningun evento modificar logico pila q unico evento cambiar logico ejecución lneo 6 21 caso compareandset exitoso anadar nodo lneo 6 justo evento corresponderan punto linealizacion operacion op opm < s op < s opm+1 contradecir orden inducir linealizacion conjunto sm+1 logico evento linpt(opm evento eca q eca metodo compareandset exitoso cambiar logico pila q insertar nodo t valor t.elim = f alse memoria t1 tm t cuyo logico q orden fijar lista t1 tm t. operacion opm+1 cumplir transicion q p ush(a = q p ush(a t rue concluir sm+1 producir ejecucion secuencial conjunto pila valido consistente iv.1 pila representado logico codificado q representado variable t op 2 opm+1 clase concurrencia correspondiente conjunto operación p op em caso clase concurrencia opm+1 corresponder operacion p op p op   18 punto linealizacion eget correspondiente lneo 16 ultimo iteracion operacion p op retornar lneo 18 suposicion linpt(opm eget logico pila ejecutar linpt(opm caso contrario evento eget obtendrar nodo t = ejecutar lneo 4 satisfactoriamente contradecir p op observ operación p op devolver cadena nulo p op realidad alterar logico pila ejecutar lneo 21 ejecutar op logico permanecer invariante palabra operacion opm+1 cumplir transicion p op = p op concluir sm+1 producir ejecucion secuencial conjunto pila valido consistente iv.1 pila representado logico codificado representado variable t op b clase concurrencia opm+1 corresponder conjunto operación ux = p op1 p opt operacion p opi devolver p opi x x elemento nulo recorder conjunto ux contener operación p op em+1 devolver elemento x. punto linealizacion linpt(op = ex elim corresponder ejecucion lneo 21 operación p opx ux punto tam- unico evento logico pila cambio cambiar tx.elim = f alse tx.elim = t rue evento ex elim tx nodo contener valor x bastar opm q = p p ny n ejecutar opm+1 p. opm < s opm+1 asegurar pila evento ex elim cambiar p p pila cambio opm opm+1 algun evento cambio asegurar ningun evento cambiar logico pila p unico evento cambiar logico ejecución lneo 6 21 caso compareandset exitoso anadar nodo lneo 6 justo evento corresponderan punto linealizacion operacion cuyo clase concurrencia op opm < s op < s opm+1 contradecir orden sm+1 evento ex elim logico p a. asegurar nodo tm = t op.get tm.elim = = f alse linea 20 nodo definicion valor a. ex elim cambiar tm.elim = t rue tm cambiar logico pila p esite nodo cuyo valor logicamente pila x = lneo 23 devolver ta.value a. palabra operacion opm+1 cumplir transicion p p op1 p opt = p p op1 p opt concluir sm+1 producir ejecucion secuencial pila valido consistente iv.1 pila representado logico codificado q representado variable t op   19 concluir sm producir ejecucion secuencial pila valido consistente iv.1 m n. consiguiente valer s. ver funcionamiento seccion destinada explicar funcionamiento algoritmo setstacklogic posible escenario as mostrar transicion forma explicito principalmente ejemplo llegar comportar memoria sistema ejecucion concurrente hilo representar lneo negro punteado evento representar ndiz figurar 4 representacion conjunto operación p opi retornar valor caso conjunto clase concurrencia operación siguiente ejemplo considerer hilo ejecutar concurrentemente ejemplo representado figura 4 hilo ejecutar operacion p opi considerarer caso operación retornar elemento apreciar demostración iteracion relevante operación ultimo ejemplo considerer ultimo iteracion p opi considerer operación ocurrir forma pila constituida lista nodo 17 f alse 11 t rue 7 f alse 13 f alse logico pila 17 7 13 nodo valor 13 pila instruccion lneo 3 representar eget operacion extra nodo referencia t op.get iteracion operación p opi finalizar valor nodo 13 valor booleano f alse operación encontrar nodo distinto lneo 17 19   20 operacion ejecutar lneo 20 evento representado eelim i nodo 13 f alse operación pasar lneo 21 llamemosle ei ejecucion lneo 21 considerer perdida generalidad operacion p op1 ejecutar dicho lneo e1 punto linealizacion conjunto operación evento producir cambio logico pila representar lneo punteada rojo evento e1 logico pila cambio 17 7 vear referencia t op apuntar nodo 13 t rue operación ejecutar lneo 22 evento eca i compareandset cambiar referencia t op relevancia finalmente operación retornar 13 evento eca i referencia atomico t op cambiar memoria real pila cambiar representar flecha negro figura 4 cambio logico lneo rojo puntead punto linealizacion conjunto figurar 5 representacion conjunto operación p opi retornar valor caso tendrar clase concurrencia ejemplo considerer conjunto operación p opi representado figura 5 operación ocurrir pila constituida lista nodo 17 f alse 11 f alse 7 t rue 13 f alse logico pila 17 11 13 instruccion lneo 3 representar eget operación extraer referencia nodo 13 f alse   21 usar notacion lneo 20 evento representado eelim i ei ejecucion lneo 21 caso evento eelim i operación p op1 p op2 ocurrir evento e1 logico pila cambio evento eelim 3 ocurrir if permitir ejecutar lneo 21 p op3 operación p op1 p op2 completar forma similar caso evento eca 3 referencia t op cambiar apuntar nodo 13 t rue nodo 7 t rue instruccion lneo 25 observ nodo 7 t rue logicamente pila operacion p op3 volver iterar intento remover nodo inicio pila nodo 7 t rue logicamente instruccion 20 falla pasar lneo 25 realizar eca 3 cambiar referencia t op nodo 7 t rue nodo 11 f alse operacion p op3 volver iterar extraer nodo eget cabezal ejecutar lnea 20 23 retornar valor 11 figurar 6 representacion interaccion operación concurrent p ush1((8 f alse p ush2((12 f alse considerer conjunto operación p ush1((8 f alse p ush2((12 f alse representado figura 6 simplicidad ejemplificarer par operación ocurrir pila constituida lista nodo 17 f alse 11 f alse logico pila 17 11 instruccion lneo 3 representar eget ambos operación extraer referencia nodo 11 f alse   22 lneo 5 operacion p ush1 conectar nodo 8 f alse nodo evento lneo 6 realizar compareandset cambiar referencia nodo evento eca 1 evento logico memoria real cambiar mostrar figura cambio logico operacion p ush2 ejecutar compareandset evento eca 2 fallar referencia cambio operacion p ush2 volver iterar comportamiento similar operacion p ush1 insertar nodo 12 f alse evento eca 2 pila ejecucion operación p ush1 p ush2 17 f alse 11 f alse 8 f alse 12 f alse observ caso punto linealizacion distinto ultimo iteracion respectivo operacion p ushi clase concurrencia s observ ocurrir punto linealizacion operacion operacion inevitablemente fallar compareandset evento eca 2 retornar f alse cambiar logico pila punto linealizacion propiedad permitir linealizar conjunto operación p ush clase concurrencia unico elemento operación p op poseer punto linealizacion permitir conjunto operación poder linealizar punto linelizacion figurar 7 representacion interaccion operación concurrent p ush((12 f alse p op ejemplo considerer operacion p ush((12 f alse p op repre- sentado figura 7 comportamiento pila constituida lista nodo 17 f alse 11 f alse 7 f alse 13 f alse logico pila 17 11 7 13   23 instruccion lneo 3 16 representar eget ambos operación extraer referencia nodo 13 f alse operacion p op ejecutar instruccion lneo 21 ocurrir punto linealizacion e1 pila cambiar logico mostrar transicion referencia continuo apuntar nodo 13 t rue operacion p ush((12 f alse ejecutar lneo 4 fallar 13 t rue).elim = = t rue lneo 10 cambio referencia t op nodo 7 f alse ejecucion compareandset lneo 22 falla independientemente operacion completar retornar valor nodo lneo 23 operacion p ush iniciar iteracion obtener t op referencia nodo 7 f alse ejecutar debido evento llegar lneo 6 evento eca 2 ejecutar compareandset exitoso cambiar referencia nodo anadido pila pila cambiar eca 2 terminar 17 11 7 12 observ problema lugar operacion p op considerar conjunto operación 3 operación ejemplo figura 4 conjunto arbitrario operación perteneciente clase concurrencia gracias unico operacion cambiar logico pila contener punto linealizacion conjunto operación p opi retornir elemento agradecimiento trabajo financiar programa beca nacional estudio posgrado 2021 conacyt agradezar comentario discusión dr armar castaneda rojano brindo conocimiento experiencia ayudar medida realizacion trabajo resultado parcial tesis maestra 1 m. herlihy and n. shavit the art of multiprocessor programming morgan kaufmann 2008 2 a. haas m. lippautz t. a. henzinger h. payer a. sokolova c. m. kirsch and a. sezgin cf 13 10.1145/2482767.2482789 2013 3 t. a. henzinger c. m. kirsch h. payer a. sezgin and a. sokolova sigplar not 48 317328 2013 4 c. m. kirsch h. payer h. rock and a. sokolova in algorithms and architectures for parallel pro- cessing edited by y. xiang i. stojmenovic b. o. apduhaber g. wang k. nakano and a. zomaya springer berlin heidelberg berlin heidelberg 2012 pp 273287 5 a. castaneda s. rajsbaum and m. raynal distributed computing 10.1007 s00446-022-00440-y 2022 6 a. castaneda and m. pín disc leibniz international proceedings in informatics lipics 16:1 2021 7 a. castaneda s. rajsbaum and m. raynal opodis leibniz international proceedings in infor- matics lipics 13:1 2020 8 m. m. michael m. t. vechev and v. a. saraswat idempotent work stealing vol. 44 acm 2009 9 m. p. herlihy and j. m. wing acm trans program lang syst 12 463492 1990 10 a. castaneda s. rajsbaum and m. raynal j. acm 65 10.1145/3266457 2018