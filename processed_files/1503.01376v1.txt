arxiv:1503.01376v1   cs.dm   4 mar 2015 bvns problema bosque generador k-etiquetado sergio consoli(1 nenad mladenovic(2 jo él a. moreno-perez(3 resumir trabajo proponer vns eciente pa- ro problema bosque generador k-etiquetado problema extension problema arbol generador mnimo etiquetado minimum la- belling spanning treir problem importante aplica- ción red telecomunicación transporte multimodal grafo dirigido cuyo enlace etiquetado numero ente- ro positivo k encontrar bosque subgrafo menor numero componente conexa usar sumo k etiqueta distinto abordar proponer vns basico bvns basic variable neighbourhood search amplitud maximo proceso agi- tacion parametro clave estudiar es- trategia establecer valor parametro obtener él estrategia depender proceso busqueda bvns estrategia seleccionado experimentalmente compa- rado metaheurstica aparecer literatura aplicado tipo problema palabra clavevns metaheurstica grafo bos- generador k-etiquetado i. introduccion red transporte multimodal repre- sentar él grafo enlace eti- queta denotar empresa gestionar ti- po transporte contexto transporte multimodal pretender garantizar ma- yor conectividad nodo red uti- lizar numero mnimo empresa pro- veedora tipo transporte 14 18 proposi- to reducir coste implantacion siste- ma transporte complejidad global red situación real estarer interesado optimizacion conectividad lmite numero proveedor modos transporte utilizado 14 problema denominado problema bosque generador etiquetado labelled spanning forest problem lsfp propuesto originalmente 2 pertenecer clase problema derivado problema arbol generador etiquetado mni- mo minimum labelling spanning treir problem mlstp 5 recibir atencion re- cientemente problema bosque generador eti- quetado entero positivo k cota superior numero etiqueta utilizar denominar pro- 1 national research council cnr istc stlab 95126 catania ct italia e-mail sergio.consoli@istc.cnr.it 2 school of information systems computing and mat- hematics brunel university london uk e-mail ne- nad.mladenovic@brunel.ac.uk 3 departamento ingeniera informatico iudr uni- versidad laguna 38271 laguna espana e-mail jamoreno@ull.es blema bosque generador k-etiquetado denotar klsfp k-labelled spanning forest problem formalizar siguiente termino k entero positivo g = v l gra- fo dirigido etiquetado v conjunto vertiz arista eti- quetada etiqueta conjunto nito eti- queta l. encontrar conjunto eti- queta ll k etiqueta distin- tas subgrafo gde g tomar arista cuyo etiqueta ltenguir menor numero componente conexa formal- mente denotar l(a l etiqueta arista a. conjunto etiqueta c l denot g(c subgrafo gra- fo etiquetar g formado arista etiqueta c g(c = v a(c don- a(c = l(a c denoter comp(c numero componente conexa subgrafo g(c problema mn{comp(c c l |c| k solucion problema aportar con- etiqueta optimo l grafo asociado g= g(v a(l bosque generador h subgrafo numero componente co- nexa gpero ciclo solucion optima gcontienir ciclo romper arbitrariamente quitar arista cualquiera tiempo polinomial obtener bosque generador h. 2 probar problema bosque ge- nerador k-etiquetado klsfp problema np- duro klsfp generalizar problema arbol ge- nerador mnimo etiquetado mlstp minimum labelling spanning treir problem cuyo objetivo determinar arbol generador grafo dirigi- do etiquetado numero mnimo etiqueta solucion problema mlst solucion problema klsf arbol solucion ob- sobrepasar lmite k numero etiqueta utilizado metodo so- lucion problema klsf buscar pri- mer lugar adaptar propuesto mlstp 5 proponer algoritmo mvca maximum vertex covering algorithm heurstica problema mlst mejorar 13 propuesta metaheurstica proble- ma aparecer 17 4 3 7 8 16 6 9 1   estructura resto trabajo si- gue seccion ii presentar detalle metodo solucion klsfp aparecido literatura propuesto diverso autor seccion iii describir detalle vns basico propuesta ajuste amplitud agitacion problema seccion iv mostrar resultado comparacion experimental nalizar seccion conclusión v. ii algoritmos klsfp describir lugar metodo exacto derivado 7 klsf continuacion describir principal metaheurstica aparecido literatura metodo piloto 3 2 algo- ritmo genetico 17 2 presentar adaptacion klsfp procedimiento busqueda voraz aleato- rizado adaptativo grasp propuesta 7 mlstp algoritmo basar mane- ra algoritmo mvca 5 13 adapta- do klsf 2 subprocedimiento cons- tructivo conjunto inicialmente vaco etiqueta c mvca anadir iterativamente c etiqueta l l c subgrafo g(c = v a(c numero mnimo com- ponent conexa |comp(c)| detener numero etiqueta utilizado alcance cota supe- rior |c| = k quedar componente conexa |comp(c)| = 1 a. metodo exacto enfoque exacto klsf basar pro- ceso exploracion vuelta backtracking grafo dirigido etiquetado g = v l n vertiz m arista etiqueta numero entero positivo k lmite superior nume- ro etiqueta metodo exacto realizar rami- cacion poda espacio solución parcial basado procedimiento recursivo conjunto etiqueta vaco construir solucion adicion iterativo etiqueta numero etiqueta llegar k. alcanzar cota aplicar fase vuelta explorar alternativa algoritmo detener solucion componente conexa superar numero k eti- queta utilizado proceso lugar enu- meracion posible combinación k etiqueta combinacion menor numero componente conexa solucion exac- ta proporcionado resultado metodo aun- tiempo computo procedimiento exponencial numero etiqueta tamano problema moderado valor solucion optima pequeno tiempo ejecucion metodo exacto razonable obtener solucion exacto b. metodo piloto idea central metodo piloto pm 3 2 consistir agotar opción posible llamado solucion maestra me- heurstica basico heurstica basica realizar tentativamente iteración solucion maestra evaluan po- sibl elección local solucion en- tonz convertir solucion maestra procedimiento continuo cumplir condición parada predenida alcanzar tiempo maximo permitido cpu numero maximo iteración metodo piloto problema klsf solucion nulo conjunto vaco etiqueta solucion maestra m. eti- queta i /m tentativamente extender copia m solucion completo incluir etiqueta i construido algo- ritmo mvca heurstica basico insertar solucion parcial etiqueta disminuir numero componente conexa subgrafo parcial estrategia voraz greedy 2 numero componente conexa solucion obtenido par- tir m m i funcion objetivo candidato i /m etiqueta candidata posible solucion maes- tra evaluar etiqueta candidata icon menor valor funcion objetivo anadir solu- cion maestra m m i base solucion maestra m iniciar itera- ción i /m proporcionar elemento solucion i as sucesivamente meca- nismo itera necesitar anadir etiqueta solucion maestra numero etiqueta utilizado |m| alcanzar k obtener unico componente conexa alternati- vamente imponer condición nalizacion permitir algoritmo al- canzar condición ultimo solucion maestra corresponder solucion aportar respuesta metodo c. algoritmo genetico algoritmo genetico ags inspirar principio seleccion natural adaptacion entorno evolucion operación cruce mutacion individuo pobla- cion 10 aplicacion metaheursti- ca klsfp grafo etiquetado dirigir g = v l individuo cromosoma poblacion subgrafo g etiqueta corresponder gen grado adap- tacion tness denir numero compo- nent conexa 17 2 poblacion inicial gene- ra anadeir etiqueta azar conjunto vaco aparecer individuo k etiqueta operador cruce mutacion aplicar conti- nuacion lugar generacion   17 2 probabilidad cruce mutacion establecer 100 17 2 numero generación establecer mitad ta- mano poblacion algoritmo genetico 17 2 unico parametro ajustar numero generación tamano poblacion cruzamiento lugar unico descendiente solución factible padr dar padre p1 l p2 l comenzar formar union p = p1 p2 continuacion agreguir etiqueta p solucion inicialmente vacar uti- lizar estrategia mvca obtener solucion hijo k etiqueta aplicar mvca subgrafo g(p etiqueta p. operacion mutacion consistir perturbacion anadir etiqueta azar eliminar etiqueta lugar individuo ajuste serie generación algoritmo con- verge individuo poblacion pro- porcionar resultado tengar algoritmo genetico terminar ultimo gene- racion solucion factible formado componente conexa d. busquedo adaptativo voraz aletaorizado procedimiento busqueda adaptativo voraz aletaorizado conocido grasp greedy ran- domized adaptiva search procedure basicamente metaheurstica constructivo constar fase iterativa constructivo seguido fase mejora basado busqueda local fase constructivo construir solucion aplicacion procedimiento voraz aleatorizado creer iterativamente lista restringido candi- dato formado candidato prometedor incorporar solucion parcial inicial- mente vaca lista restringido candidato denotar lrc iteracion seleccionar azar elemento incorpo- ra solucion parcial 15 klsfp utiliza- mos lista restringido candidato basado evaluacion etiqueta incorporar lrc 7 extension criterio clasico apli- car grasp consistir colocar lista etiqueta candidata valora- cion numero componente conexa caso klsfp umbral denido usuario 15 implementacion aplicar alea- torizacion completo elegir etiqueta inicial incorporar solucion vaco corresponder es- tablecer iteracion umbral + signicar lista candidato formado etiqueta modelo restan- tes iteración etiqueta anadir lista lrc formar considerar etiqueta numero mnimo componente conexa etapa especca n intensicar maximo proceso busqueda signico ja umbral numero mnimo componen- tes conexa obtenido posible etiqueta anadir 7 etiqueta lugar menor numero componente conexa paso constituir lista restringido candidato lrc iteracion seleccionar aleatoriamen- etiqueta lista restringido candidato lrc anadir solucion actual actuali- za lista restringido candidato solucion parcial itera proceso fase cons- tructivo nalizar obtener solucion k etiqueta lugar subgrafo componente conexa consiguiente mejora busqueda local quitar criterio greedy etiqueta anadir etique- ta utilizar algoritmo mvca forma numero componente conexa reducir mnimo producir intensicacion algoritmo proceso fase iterativo continuar satisfagar condicion parada especi- usuario criterio parada usual referencia alcanzar tiempo cpu maximo permitido numero maximo itera- ción numero maximo iteración mejora sucesivo resultado nal aportado procedimiento grasp solucion encontrado iteración iii busqueda entorno variable idea fundamental busqueda entorno variable vns variable neighbourhood search cambio sistematico estructura entorno escapar mnir local 11 idea busqueda entorno variable basi- ca bvns basic variable neighbourhood search explorar entorno alejado iniciar busqueda local as tratar mejorar opti- mo local alcanzado 12 implementacion bvns klsfp inspirada exi- to vns propuesta problema arbol generador etiquetado mnimo mlst minimum labeling spanning tree 7 grafo di- rigido g = v |v | = n vertiz |a| = m arista etiquetada |l| = etiqueta entero positivo k lmite numero etiqueta utilizar solucion c l co- dico cadena binario string forma c = l1 l2 l ell li = 1 etiqueta i in- cluir solucion c li = 0 caso contrario seleccionar conjunto qmax estructura entor- nq q = 1 2 qmax aplicacion espacio solución par- tes subconjunto solución parametro qmax numero maximo estructura entorno utilizar eleccion comun  simple estrutura entorno metaheurstica fami-   lia entorno tamano creciente tal |n1(c)| < < |nq(c)| < < |nqmax(c)| c l. c1 c2 = |c1c2| = sum ell i=1i distancia hamming solución c1 c2 i = 1 etiqueta i incluir solución i = 0 caso contrario i = 1 2 conjunto solu- ción q-esimo entorno solucion c establecer nq(c = c l c c = q q = 1 qmax vns basico implementar comenzar solucion inicial c. conjunto inicial etiqueta obtener inclusion iterativo etiqueta seleccionado forma aleatorio conjunto inicialmente vaco k etiqueta continuacion algoritmo aplicar fase agita- cion c consistir seleccion aleatorio solucion c entorno nq(c solu- cion actual c dejar variar parametro q 1 qmax ejecucion construir solucion c nq(c proceso agitacion comenzar c = c. lugar quitar q etiqueta azar c eti- queta haber retirar requerir expansion estructura entorno caso q > |c| incluir etique- ta adicional c elegidas azar conjunto etiqueta l c 7 pseudocodigo proceso agitacion describir algoritmo 1 algorithm 1 agitacion bvns klsfp procedimiento agitacion(nq(c begin c c i 1 while i q do if i |c| thir seleccionar azar etiqueta c c borrar etiqueta c conjunto etiqueta usado c c c elsir seleccionar azar etiqueta usado c i.e c l c anadir etiqueta c conjunto etiqueta usado c c c end i i + 1 end actualizar h = v a(c comp(c end agitacion aplicar busquedo lo- cal solucion c solucion inicial busqueda intentar eliminar etique- tas c agregar etiqueta siguien- do metodo voraz mvca reducir mni- mo numero componente conexa alcanzar k etiqueta busqueda local obtener conjunto c etiqueta c obtener mejora |comp(c)| |comp(c)| amplitud agi- tacion incrementar q q + 1 dar lugar diversicacion proceso busqueda pseudocodigo busqueda local describir algoritmo 2 algorithm 2 busquedar local bvns klsfp procedimiento busqueda-local(c begin c c i 1 while i |c| do eliminar etiqueta i-esima c c c c ci while comp(c > 1 |c| < k do seleccionar azar etiqueta usado c l c minimizar comp(c c anadir etiqueta c conjunto etiqueta usado c c c actualizar h = v a(c comp(c end i i + 1 end end vns basico bvns 12 comenzar so- lucion inicial c. aplicar procedimiento agi- tacion descrito algoritmo 1 cparo ob- c nq(c c solucion inicial ejecutar busqueda local descrito algoritmo 2 obtener c. c mejorar c(es |comp(c)| < |comp(c)| sustituir solu- cion actual reiniciar amplitud q agitacion 1 q 1 caso incrementar unidad amplitud agitacion q q + 1 forma amplitud agitacion q var 1 valor maximo qmax parametro clave bvns proceso cambiar estructu- ra entorno busqueda local alcanzar mnimo local mejorar solucion representar idea central vns basi- ca proporcionar diversicacion creciente procedimiento repetir iterativamente alcanzar condición parada predeterminado proporcionar nal solucion ccomo salida pseudocodigo bvns describir algoritmo 3 a. ajuste amplitud agitacion parametro qmax determinar amplitud lle- gar alcanzar proceso agitacion vns basico valor parametro relevante modular vns basico as balance adecuado potencia intensicacion ca-   algorithm 3 bvns klsf input grafo dirigido g = v |v | = n vertiz |a| = m arista etiquetada |l| = etiqueta entero po- sitivo k output bosque f begin cgenerar azar repeat tomar q 1 qmax |c| while q < qmax do c agitacion(nq(c c busqueda-local(c if |c| < |c| thir mover él cc reinicializar amplitud agitacion q   1 actualizar maximo amplitud agita- cion qmax |c| else aumentar amplitud agitacion q   q + 1 end end until condición parada tomar bosque generador f grafo g(c = v a(c end pacidad diversicacion 11 seleccion valor pequeno qmax producir alto potencia intensicadoro bajo capacidad diversicadoro dar lugar algoritmo rapido alto probabilidad quedar atrapado mnimo local optimo contrario valor qmax disminuir capacidad intensicacion aumentar capacidad diversicacion lugar algoritmo lento facilidad pa- ro escapar mnir local suboptimo objeto estudiar relevancia parametro op- tar alternativa establecer ti- pos estrategia 1 estrategia consistir elegir parame- tro qmax jo ejecución algoritmo qmax = independientemente instancia aplicar potencia exploradoro agitacion ja 2 estrategia consistir elegir parametro qmax depender dicultad mag- nitud instancia caso optamos to- mar cota superior k numero etiqueta medida depender directamente tamano espacio solución aplica- mos formula tipo qmax =    k. potencia exploradoro agitacion depender ta- mano espacio solución 3 estrategia consistir elegir parame- tro qmax depender encuen- tre busqueda reejo busqueda elegir tamano so- lucion actual formula establecer tamano agitacion qmax =    |c| c solu- cion actual potencia exploradoro agitacion depender proceso busqueda medido valor funcion objetivo evaluar rendimiento estrategia des- crita bvns utilacer subconjunto instancia propuesto literatura tipo problema 4 conjunto instancia generado aleatoriamente numero nodo n numero etiqueta obtener conjunto instancia combinación parametro n d numero n vertiz vario 100 500 numero eti- queta 0 25n 1.25n establecer numero arista jo densidad grafo d = 0.5 numero maximo arista instan- cia m = 0.5n(n1 valor parametro k adaptar instancia klsfp determino ex- perimentalmente n/2j j valor pequeno instancia ge- nerada formarar unico solucion conexir resolver mvca 2 combinacion n d k generar azar 10 instancia dis- tinta cota k numero etiqueta factor importancia crucial crear instancia signicativa elegir particular numero etiqueta necesa- ria obtener mlst podra facil heurstica detectar componente conexa solucion optima tiempo extremadamen- corto valor k pequeno problema podra igualmente facil espacio busquedo podra recorrer rapidamente analizar etrategia seleccion maximo amplitud agitacion qmax des- crita optar rendimiento realizar experimento 8 conjunto instancia com- binación numero vertiz n = 100 n = 200 numero etiqueta = 0,25n = 0,5n = n = 1.25n 80 caso to- caso ejecutar algoritmo maximo 60 segundo tiempo cpu tiempo aperecir tabla corresponder tiempo emplear encontrar solucion expresado milisegundo instancia disponible http://www.sergioconsoli.com/mlstp.htm to- calculo mac osx 10.9 microprocesador 3.0 ghz 8 gb ram comparar 5 caso particular estrategia anterior elegir 5 valor parametro   as estrategia 1 considerar valor     5 10 15 20 25 estrategia 2 considera- ron valor   0.1 0.3 0.5 0.7 0.9 final- mente estrategia 3 considerar valo- r   1/3 2/3 3/3 4/3 5/3 15 estrate- gia actualizacion parametro qmax correspon- diente lugar 15 versión bvns resumir tabla i. resultado computacio- nal obtenido 15 versión bvns mostrar tabla ii iv num qmax valor   1 =   5 10 15 20 25 2 =    k 0.1 0.3 0.5 0.7 0.9 3 =    |c| 1/3 2/3 3/3 4/3 5/3 tabla i estrategia seleccion amplitud agitacion resultado computacional obtenido ca- estrategia propuesto respefctivamente tabla ii tabla iii tabla iv resultado obtenido estrategia 1 pobre valor objetivo pa- ro tamano 20 25 aceptable tiempo ejecucion resultado resulta- computacional obtenido estrategia 2 pasar mejor detectar excesivo diversicacion valor   tiem- pos ejecucion alto estrategia 3 observar doble comportamiento   algoritmo terminar prematura solución bajo calidad adoleceir capa- cidad exploracion   observar mejor resultado agitacion amplir   crecer producir pico diversicacion dar lugar malo resultado traducir tiempo ex- cesivo aportar solución alto calidad consecuencia estrategia agitacion amplitud dependien- tamano solucion actual constante proporcionalidad directo 4/3 qmax = 4|c|/3 producir mejor resultado conclusion coin- ceder observado 7 mostrar parametro qmax = 4|c|/3 balance exploracion explotacion mlstp iv comparacion metaheurstica evaluar rendimiento eciencia al- goritmo propuesto comparacion descri- tos seccion ii usar instan- cia propuesto 2 realizar experimento 20 conjunto instancia numero vertiz n 100 200 300 400 500 numero etiqueta 0 25n 0.5n n 1.25n combinacion n disponer 10 instancia distinto 200 ca- sos instancia disponible http://www.sergioconsoli.com/mlstp.htm resultado obtenido ofrecer tabla v. primero columna mostrar parametro caracterizar conjunto instan- cia n ell k columna res- tant resultado obtenido algorit- mo descrito conjunto instancia calidad solucion obtenido obj evaluir co- mo numero componente conexa 10 instancia problema tiempo cpu maximo permitido 60 600 segundo elegir condicion parada metaheursti- cas determinado experimentalmente dimension conjunto dato considerado 1 minuto n 200 10 minuto pa- ro n > 200 algoritmo genetico jamos numero generación instancia computo llevar maximo tiempo cpu permitido me- taheurstica ejecutar tiempo maximo cpu alcanzar caso registrar me- jor solucion tiempo computacional ta- bla v columna etiquetada tiemposon tiempo medio obtener mejo- r solución caso obtener solucion 3 hora metodo exacto denotar nf tabla v. rendimiento algoritmo considerar ob- menor valor objetivo promedio valor objetivo promedio similar menor tiempo computacional tabla v observar bvns capaz obtener alto rendimiento problema klsf conjunto dato obtener rapidamente solución cali- dad tiempo ejecucion lento heurstica obtener mejor solución calidad ejemplo instancia n = 200 = 200 n = 300 = 375 n = 400 = 500 n = 500 = 500 calidad medio solucion obte- nido bvns comparable obtenida procedimiento empleo tiempo compu- tacional menor heurstica algoritmo genetico rendimien- to calidad solucion tiempo computo con- rma general comportamiento me- taheurstica poblacional abordar clase problema vease ejemplo 2 7 8 meto- do piloto registro comportamiento algoritmo genetico calidad medio solución tiempo ejecucion indicar dispersion exce- sivo diversicacion grasp opcion tiempo ejecu- cion calidad medio solución bvns interesante notar caso problema   parametro vns-01-5 vns-01-10 vns-01-15 vns-01-20 vns-01-25 n   k obj tiempo obj tiempo obj tiempo obj tiempo obj tiempo 100 25 3 2.1 20.5 2.1 1.2 2.1 0.7 2.1 0.9 2.1 1.9 100 50 3 5.2 7.8 5.2 4.6 5.2 4.5 5.2 4.4 5.2 5.7 100 100 4 8.3 49.8 8.3 24.6 8.3 164.7 8.3 19.9 8.3 85.8 100 125 5 4.1 106.4 4.1 196.7 4.1 220.5 4.1 68.1 4.1 195.7 200 50 3 2.0 128.6 2.0 37.9 2.0 109.6 2.0 98.9 2.0 45.7 200 100 4 2.2 741.6 2.2 942.7 2.2 1085.4 2.2 797.5 2.2 933.2 200 200 5 7.0 5379.6 6.8 4923.4 6.8 2072.8 6.8 4700.5 6.8 3580.9 200 250 6 4.4 1218.3 3.9 9701.9 4.2 12522.3 3.9 10862.4 4.0 14854.4 tabla ii resultado estrategia 1 parametro vns-02-1 vns-02-3 vns-02-5 vns-02-7 vns-02-9 n   k obj tiempo obj tiempo obj tiempo obj tiempo obj tiempo 100 25 3 2.1 1.5 2.1 1.4 2.1 1.0 2.1 1.1 2.1 1.6 100 50 3 5.2 30.2 5.2 4.1 5.2 4.4 5.2 62.3 5.2 4.7 100 100 4 8.3 68.9 8.3 125.9 8.3 44.1 8.3 73.8 8.3 83.2 100 125 5 4.1 42.4 4.1 68.3 4.1 155.9 4.1 219.1 4.1 152.7 200 50 3 2.0 118.9 2.0 69.7 2.0 38.2 2.0 127.9 2.0 17.4 200 100 4 2.2 1943.9 2.2 1305.3 2.2 1407.6 2.2 1269.1 2.2 1068.9 200 200 5 6.8 8298.7 6.8 3231.1 6.8 2156.3 6.8 3027.8 6.8 6570.6 200 250 6 4.1 8638.9 4.1 11113.5 4.1 11183.2 4.0 17258.8 4.0 13368.5 tabla iii resultado estrategia 2 parametro vns-03-1/3 vns-03-2/3 vns-03-3/3 vns-03-4/3 vns-03-5/3 n   k obj tiempo obj tiempo obj tiempo obj tiempo obj tiempo 100 25 3 7.5 0.6 7.5 0.7 2.1 3.1 2.1 1.0 2.3 1.7 100 50 3 15.4 0.6 15.4 0.8 5.3 2.6 5.2 4.2 5.8 4.5 100 100 4 29.3 0.4 8.8 40.1 8.7 29.9 8.3 11.9 8.3 44.7 100 125 5 29.2 0.7 4.9 572.4 4.5 23.9 4.1 36.1 4.1 38.8 200 50 3 9.0 0.7 9.0 0.7 2.1 64.1 2.0 10.2 2.3 19.7 200 100 4 14.3 0.2 3.5 362.4 2.6 658.2 2.2 731.1 2.2 2199.1 200 200 5 33.7 0.5 9.1 238.1 7.2 673.9 6.8 1519.1 6.8 8636.5 200 250 6 36.2 0.9 6.3 357.2 4.6 7979.3 3.9 2789.2 4.1 4600.1 tabla iv resultado estrategia 3 metodo exacto obtener solucion optima bvns producir so- lucion tiempo computo corto bvns proporcionar compromiso capacidad intensicacion diversicacion problema considerado resumir resultado demostrar bvns metaheurstica ecaz problema klsf producir solucio- nes alto calidad tiempo computacional ejecucion corto v. conclusión trabajo considerar problema bosque generador k-etiquetado klsfp pro- blema np-duro resultar extension problema arbol generador etiquetado mni- mo mlstp caso imponer cota superior k numero etiqueta utilizar proposito obtener solucion mnimo numero componente conexa violar restriccion problema klsf np-duro interesante heurstica metaheurstico permitir abordar garanta rendimiento describir bvns ajustar parame- tro clave ja maximo amplitud al- canzar proceso agitacion compruebir experi- mentalmente opcion depender parametro proceso busqueda conclusion podrar extender él problema presumir formula actuali- zacion similar aplicable problema tamano solucion reejar proceso busqueda ajuste parame- tro bvns comparo experimentalmente amplio gama instancia klsfp metaheurstica propuesto literatura problema metodo piloto algoritmo geneti- co procedimiento busqueda voraz aleatorio adaptativo grasp enfoque exacto resolucion experimento computaciona-   d = 0.5 exacto pm ga grasp bvns n   k obj tiempo obj tiempo obj tiempo obj tiempo obj tiempo 100 25 3 2.1 59.4 2.1 6.8 2.1 47.2 2.1 7.7 2.1 1.1 100 50 3 5.2 84.3 5.2 35.7 5.2 62.6 5.2 19.4 5.2 4.2 100 100 4 8.3 1100 8.3 125.7 8.3 215.2 8.3 108.5 8.3 16.3 100 125 5 4.1 44400 4.3 217.2 4.1 281.7 4.3 143.6 4.1 29.5 200 50 3 2 481.4 2 65.1 2 458.9 2 30.3 2 8.4 200 100 4 2.2 2500 2.4 699.3 2.7 1100 2.4 319.1 2.2 243.6 200 200 5 6.6 978900 6.9 5300 7 11300 7 775.2 6.6 1900 200 250 6 nf nf 4.3 9200 4.4 12700 4.3 10400 3.9 7500 300 75 3 2 793.8 2 295.5 2 1600 2 132.3 2 60.2 300 150 4 3.6 16700 3.8 2600 4 9100 3.9 10100 3.6 4400 300 300 5 nf nf 13.5 12200 13.6 14100 13.5 13100 12.9 9700 300 375 6 nf nf 10.3 18900 10.7 16500 10.1 5900 9.7 41100 400 100 3 2.3 1500 2.3 955.2 2.4 7200 2.3 365.1 2.3 236.9 400 200 3 31.9 23300 31.9 6500 31.9 10300 31.9 3600 31.9 503.8 400 400 5 nf nf 21.1 38300 21.6 42900 21.5 7900 20.9 175000 400 500 6 nf nf 18.8 58800 18.7 26900 18.3 33300 17.7 39500 500 125 3 2.9 21200 2.9 2200 3.1 22500 2.9 693.8 2.9 617.1 500 250 4 5.8 193900 6.1 19700 6.3 36800 6.1 9300 5.8 25200 500 500 6 nf nf 8.8 95700 9.1 117800 8.8 50300 8.1 166400 500 625 7 nf nf 7.7 155100 8.9 136900 7.7 140600 7 91700 164.7 426900 168.1 468800 164.6 287100 159.2 406600 tabla v resultado |v | = 100 200 300 400 500 |l| = 0.25|v | 0.5|v | |v | 1.25|v | mostrar bvns debidamente ajustado su- pera metaheurstica rapir simple particularmente ecaz problema klsf agradecimiento trabajo parcialmente nanciado proyecto tin2012-32608 ministerio economa competitividad referencia 1 t. bruggemann j. monnot g. j. woeginger local search for the minimum label spanning treir problem  with bounded colour class operations research letter 31 2003 195201 2 cerulli r. a. fink m. gentili and a. raiconi the k- labeled spanning forest problem procedia social and behavioral scienz 108 2014 pp 153163 3 cerulli r. a. fink m. gentili and s. vo extensions of the minimum labelling spanning treir problem jour- nal of telecommunications and information technology 4 2006 pp 3945 4 cerulli r. a. fink m. gentili and s. vo metaheu- ristics comparison for the minimum labelling spanning treir problem in b. l. goldir s. raghair e. a. wa- sil eds the next wave on computing optimization and decision technologies springer-verlag new york 2005 pp 93106 5 chang r. s. and s. j. leu the minimum labelling span- ning trees information processing letters 63 1997 pp 277282 6 a. m. chwatal g. r. raidl solving the minimum label spanning treir problem by ant colony optimization pro- ceedings of the 7th international conference on genetic and evolutionary methods gem 2010 2010 9197 vega nevado 7 consoli s. k. darby-dowman n. mladenovic and j. a. moreno-perez greedy randomized adaptive search and variable neighbourhood search for the minimum labelling spanning treir problem european journal of operational research 196 2009 pp 440449 8 consoli s. k. darby-dowman n. mladenovic and j. a. moreno-perez variable neighbourhood search for the mi- nimum  labelling steiner tree problem annals of opera- tions research 172 2009 pp 7196 9 s. consoli j. a. moreno-perez solving the minimum labelling spanning treir problem using hybrid local search electronic notes in discrete mathematics 39 2012 pp 7582 10 goldberg d. e. k. deb and b. korb dont worry be messy in proceedings of the 4th international confe- rence on genetic algorithms 1991 pp 2430 11 hansen p. and n. mladenovic variable neighbourhood search computers and operations research 24 1997 pp 10971100 12 hansen p. n. mladenovic and j.a moreno-perez va- riable neighbourhood search methods and applications annals of operations research 175 2010 pp 367407 13 krumke s. o. and h. c. wirth on the minimum label spanning treir problem information processing letters 66 1998 pp 8185 14 miller j. s. multimodal statewidir transportation plan- ning survey of statar practiz transportation re- search board national research council virginia us 2006 15 resende m. g. c. and c. c. ribeiro greedy randomi- zed adaptivar search procedure in f. glover and g. ko- chenberger editors handbook of metaheuristics kluwer academic publishers norwell ma 2003 pp 219249 16 xiong y. b. goldir and e. wasil one-parameter ge- netic algorithm for the minimum labelling spanning treir problem ieee transactions on evolutionary compu- tation 9 2005 pp 5560 17 xiong y. b. goldir and e. wasil improved heuristics for the minimum labelling spanning treir problem ieee transactions on evolutionary computation 10 2006 pp 700703 18 van-nes r. design of multimodal transport networks hierarchical approach delft university press 2002